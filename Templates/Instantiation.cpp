#include "Instantiation.h"

#include <string>

// instantiation: Лекция (время 44:30): https://www.youtube.com/watch?v=G_jcBrrYPAs&ysclid=mct1fzo0rj301368439

/*
 Шаблон (template) — паттерн который создает классы или функции различных типов.
 
 Инстанцирование шаблона – это генерация кода функции или класса через подстановку параметров в шаблон.
 При инстанцировании 3 разных типов: int, double, string, компилятор создает три разные функции/классы.
 2 Вида инстанцирования:
 1. Неявное инстанцирование (implicit instantiation) - происходит при вызове функции или создании объекта класса (обычно в .h файлах)
 Плюсы:
 - не нужно явно инстанцировать все типы в .cpp файле
 - не нужно явно инстанцировать все типы, если шаблон инициализирован и определен в одном .cpp файле в том месте, где он вызывается
 Минусы:
 - Размещение шаблонов в .h файлах может привести к загромождению размера кода и размера скомпилированного двоичного файла.
 2. Явное инстанцирование (explicit instantiation) с помощью резервированного слова template (обычно в .cpp файлах). Каждая единица трансляции транслируется отдельно, а потом всё линкуется. Инстанцирование шаблонов (подстановка) происходит до линковки. Компилятор при генерировании кода должен видеть определение шаблона (а не только объявление), так и определения типов, которые подставляются в шаблон. Поэтому если класс/функция инициализированы в .h файле, а реализация в .cpp файле, то при одновременной комплияции двух .cpp файлов компилятор не запомнит подставляемый тип в одном .cpp файла, где вызывается шаблон, во время компиляции другого .cpp файла, где находится реализация метода/класса. В .cpp файле, где реализация метода/класса нужно сделать явное инстанцирование.
 Плюсы:
   - Сокрытие явной реализации класса/метода в .cpp файле
   - Предотвращение переопределение объекта (экономит время и размер)
 Минусы:
 - Если не создать явное инстанцирование всех типов в .cpp файле, то будет ошибка: undefined reference
 - Явно инстанцированная шаблонная функция/класс могут иметь копии .cpp файлах, что может тормозить сам процесс компиляции и сборки
 Дополнение: Явно инстанцированная шаблонная функция/класс могут иметь копии .cpp файлах, что может тормозить сам процесс компиляции и сборки. Можно указать явное объявление инстанциации с помощью extern в .h файле и одно определение в .cpp файле, и тогда компилятору не нужно будет инстанцировать шаблон в каждой единице трансляции, что уменьшает время компиляции.
 */

namespace instantiation
{
    template<typename ...TArgs>
    constexpr int Instantiation::ExplicitCountArgs(TArgs ...args)
    {
        return sizeof...(args);
    }

    template int Instantiation::ExplicitCountArgs(int);
    template int Instantiation::ExplicitCountArgs(int&);
    template int Instantiation::ExplicitCountArgs(int&&);
    template int Instantiation::ExplicitCountArgs(double&);
    template int Instantiation::ExplicitCountArgs(double&&);
    template int Instantiation::ExplicitCountArgs(std::string&);
    template int Instantiation::ExplicitCountArgs(std::string&&);
    template int Instantiation::ExplicitCountArgs(int&, double&, std::string&);
    template int Instantiation::ExplicitCountArgs(int&&, double&&, std::string&&);
}
